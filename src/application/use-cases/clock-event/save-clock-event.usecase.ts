// src/application/use-cases/clock-event/save-clock-event.usecase.ts
/**
 * @file Implements the use case for saving a new clock event (clock-in or clock-out).
 * This use case is responsible for creating and persisting {@link ClockEvent} entities.
 */

import type { ClockEvent } from '@/domain/entities';
import type { IClockEventRepository } from '@/application/ports/repositories';

/**
 * @interface SaveClockEventInputDTO
 * @description Data Transfer Object for saving a clock event.
 * It includes all properties of a {@link ClockEvent} except for the `id`,
 * which will be generated by the use case.
 * @extends {Omit<ClockEvent, 'id'>}
 */
export interface SaveClockEventInputDTO extends Omit<ClockEvent, 'id'> {}

/**
 * @class SaveClockEventUseCase
 * @description Use case responsible for creating and persisting a new {@link ClockEvent}.
 * It validates required input (like `spaceId`), generates a unique ID for the event,
 * and uses the {@link IClockEventRepository} to save it.
 */
export class SaveClockEventUseCase {
  /**
   * Constructs the SaveClockEventUseCase.
   * @param {IClockEventRepository} clockEventRepository - The repository for clock event data.
   * This dependency is injected to abstract data persistence.
   */
  constructor(private readonly clockEventRepository: IClockEventRepository) {}

  /**
   * Executes the use case to save a new clock event.
   * @param {SaveClockEventInputDTO} data - The input data for the clock event to be saved.
   * This should include `type` (clock-in/out), `timestamp`, and `spaceId`.
   * @returns {Promise<ClockEvent>} A promise that resolves to the newly created and persisted {@link ClockEvent}.
   * @throws {Error} If `spaceId` is not provided in the input data.
   * @description This method performs the following:
   * 1. Validates that `spaceId` is present in the input data. Throws an error if missing.
   * 2. Creates a new {@link ClockEvent} object by:
   *    - Spreading the properties from the input `data`.
   *    - Generating a unique `id` using `self.crypto.randomUUID()`.
   * 3. Calls `clockEventRepository.save` to persist the new clock event.
   * 4. Returns the persisted clock event.
   */
  async execute(data: SaveClockEventInputDTO): Promise<ClockEvent> {
    if (!data.spaceId) {
      throw new Error("spaceId is required to save a clock event.");
    }
    const newClockEvent: ClockEvent = {
      ...data,
      id: self.crypto.randomUUID(),
    };
    return this.clockEventRepository.save(newClockEvent);
  }
}
